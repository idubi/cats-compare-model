{
    "sourceFile": "src/datasets/augmentation_system/main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1742084441168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1742084441168,
            "name": "Commit-0",
            "content": "import cv2\nimport os\nimport sys\nimport shutil\n\nproject_root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../../..\"))\n\n\nsys.path.append(project_root)\n\n# Now you can import using the full path from the project root\nfrom src.services.logger_service import LoggerService\n\n\n# Initialize logger with module name\n\n\n\n\n# Get the absolute path of the script's directory\nscript_dir = os.path.dirname(os.path.abspath(__file__))\n\n# Add the script's directory to Python path\nsys.path.append(script_dir)\n\nconfig_path = os.path.join(script_dir, \"config.json\")\nprint(f\"Config path: {config_path}\")\n\n\nfrom config_manager import ConfigManager\nfrom augmentation_executor import AugmentationExecutor\n\n\ndef cleanup_augmentations():\n    \"\"\"Clear all augmented images before starting new augmentation process\"\"\"\n    try:\n        input_dir = config_manager.get_path(\"base_dir\")\n        for image_classification in os.listdir(input_dir):\n            images_subfolders = config_manager.get_path(\"images_subfolders_to_use\")\n            for  subfolder in images_subfolders:\n                output_dir =  os.path.join(input_dir,image_classification,config_manager.get_path(\"augmented_dir\"))\n        \n                if os.path.exists(output_dir):\n                    # Clear images directory\n                    images_dir = os.path.join(output_dir, \"images\")\n                    if os.path.exists(images_dir):\n                        shutil.rmtree(images_dir)\n                    os.makedirs(images_dir, exist_ok=True)\n                    \n                    # Clear labels directory\n                    labels_dir = os.path.join(output_dir, \"labels\")\n                    if os.path.exists(labels_dir):\n                        shutil.rmtree(labels_dir)\n                    os.makedirs(labels_dir, exist_ok=True)\n                \n        logger.info(\"✅ Cleared all augmentation folders\")\n    except Exception as e:\n        logger.error(f\"Failed to cleanup augmentation folders: {str(e)}\")\n        raise\n\n\ndef save_augmented_image(img, save_path):\n    if img is None or img.size == 0:\n        logger.error(f\"Invalid image - cannot save empty image\")\n        return False\n        \n    try:\n        success = cv2.imwrite(save_path, img)\n        if not success:\n            logger.error(f\"Failed to save image to {save_path}\")\n            return False\n        return True\n    except Exception as e:\n        logger.error(f\"Error saving image: {str(e)}\")\n        return False\n\n\nif __name__ == \"__main__\":\n    config_manager = ConfigManager(config_path)\n    executor = AugmentationExecutor(config_manager)\n\n    logger = LoggerService(config_manager.get_log_file())\n\n    cleanup_augmentations()\n\n\n    input_dir = config_manager.get_path(\"base_dir\")\n    #  the folders are orgenized : 'DATASETS/BLUEPRINT_DS/<LCASIFICATION>/<DETECTION-INDICATOR>/image/<image_name>.jpg'\n    for image_classification in os.listdir(input_dir):\n        images_subfolders = config_manager.get_path(\"images_subfolders_to_use\")\n        for  subfolder in images_subfolders:\n            output_dir =  os.path.join(input_dir,image_classification,config_manager.get_path(\"augmented_dir\"))\n            os.makedirs(output_dir, exist_ok=True)                \n            \n            images_path = os.path.join(input_dir, image_classification,subfolder)\n            for root, dirs, files in os.walk(os.path.join(images_path,'images')):\n            # Filter for image files\n               for file in files:\n                  image_path = os.path.join(root, file)\n                  image = cv2.imread(image_path)\n                  if image is None:\n                        continue\n                  try:\n                        augmented_image, applied_augmentations = executor.apply_augmentations(image,image_path)\n                        #   if len(applied_augmentations)> 0 :\n                        if len(applied_augmentations)>0 and augmented_image is not None and augmented_image.size > 0:\n                            try :\n                                save_augmented_image(augmented_image,os.path.join(output_dir, 'images',file))\n                                logger.info(f'{file} : augmentation {applied_augmentations} applied ')\n                            except cv2.error as e:\n                                logger.error(f'{file} : openCv error : {e} \\n augmentation failed on {applied_augmentations}  ')\n                        else     :\n                                logger.info(f'{file} : no augmentation on file applied ')\n                        #  now create a label for this file and json that it is augmentation of file...\n                  except Exception as e:\n                      logger.error(f'{file} : failed on apply augmentation  {e}  ')\n                      \n                      \n                \n\n    print(\"✅ Augmentation complete!\")\n"
        }
    ]
}